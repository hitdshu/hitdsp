#include "catch/catch.hpp"
#include "fft/fft_base_impl.h"
#include "fft/fft_radix2.h"
#include "fft/fft_radix4.h"

TEST_CASE("Test base dft implementation", "[fft]") {
    ::hitdsp::fft::FftBaseImpl fft;
    fft.Init(8, true);
    ::std::complex<float> input[8];
    ::std::complex<float> output[8];
    input[0] = ::std::complex<float>(0.707106781186548, -0.707106781186548);
    input[1] = ::std::complex<float>(0, -1);
    input[2] = ::std::complex<float>(-0.707106781186548, -0.707106781186548);
    input[3] = ::std::complex<float>(-1, 0);
    input[4] = ::std::complex<float>(-0.707106781186548, 0.707106781186548);
    input[5] = ::std::complex<float>(0, 1);
    input[6] = ::std::complex<float>(0.707106781186548, 0.707106781186548);
    input[7] = ::std::complex<float>(1, 0);
    fft.Transform(input, output);
    REQUIRE(fabs(output[0].real()) < 1e-5);
    REQUIRE(fabs(output[0].imag()) < 1e-5);
    REQUIRE(fabs(output[1].real()) < 1e-5);
    REQUIRE(fabs(output[1].imag()) < 1e-5);
    REQUIRE(fabs(output[2].real()) < 1e-5);
    REQUIRE(fabs(output[2].imag()) < 1e-5);
    REQUIRE(fabs(output[3].real()) < 1e-5);
    REQUIRE(fabs(output[3].imag()) < 1e-5);
    REQUIRE(fabs(output[4].real()) < 1e-5);
    REQUIRE(fabs(output[4].imag()) < 1e-5);
    REQUIRE(fabs(output[5].real()) < 1e-5);
    REQUIRE(fabs(output[5].imag()) < 1e-5);
    REQUIRE(fabs(output[6].real()) < 1e-5);
    REQUIRE(fabs(output[6].imag()) < 1e-5);
    REQUIRE(fabs(output[7].real() - 5.65685425) < 1e-5);
    REQUIRE(fabs(output[7].imag() + 5.65685425) < 1e-5);
    fft.Init(8, false);
    fft.Transform(output, input);
    REQUIRE(fabs(input[0].real() - 0.707107) < 1e-5);
    REQUIRE(fabs(input[0].imag() + 0.707107) < 1e-5);
    REQUIRE(fabs(input[1].real()) < 1e-5);
    REQUIRE(fabs(input[1].imag() + 1) < 1e-5);
    REQUIRE(fabs(input[2].real() + 0.707107) < 1e-5);
    REQUIRE(fabs(input[2].imag() + 0.707107) < 1e-5);
    REQUIRE(fabs(input[3].real() + 1) < 1e-5);
    REQUIRE(fabs(input[3].imag()) < 1e-5);
    REQUIRE(fabs(input[4].real() + 0.707107) < 1e-5);
    REQUIRE(fabs(input[4].imag() - 0.707107) < 1e-5);
    REQUIRE(fabs(input[5].real()) < 1e-5);
    REQUIRE(fabs(input[5].imag() - 1) < 1e-5);
    REQUIRE(fabs(input[6].real() - 0.707107) < 1e-5);
    REQUIRE(fabs(input[6].imag() - 0.707107) < 1e-5);
    REQUIRE(fabs(input[7].real() - 1) < 1e-5);
    REQUIRE(fabs(input[7].imag()) < 1e-5);
}


TEST_CASE("Test radix2 fft implementation", "[fft]") {
    ::hitdsp::fft::FftRadix2 fft;
    fft.Init(8, true);
    ::std::complex<float> input[8];
    ::std::complex<float> output[8];
    input[0] = ::std::complex<float>(0.707106781186548, -0.707106781186548);
    input[1] = ::std::complex<float>(0, -1);
    input[2] = ::std::complex<float>(-0.707106781186548, -0.707106781186548);
    input[3] = ::std::complex<float>(-1, 0);
    input[4] = ::std::complex<float>(-0.707106781186548, 0.707106781186548);
    input[5] = ::std::complex<float>(0, 1);
    input[6] = ::std::complex<float>(0.707106781186548, 0.707106781186548);
    input[7] = ::std::complex<float>(1, 0);
    fft.Transform(input, output);
    REQUIRE(fabs(output[0].real()) < 1e-5);
    REQUIRE(fabs(output[0].imag()) < 1e-5);
    REQUIRE(fabs(output[1].real()) < 1e-5);
    REQUIRE(fabs(output[1].imag()) < 1e-5);
    REQUIRE(fabs(output[2].real()) < 1e-5);
    REQUIRE(fabs(output[2].imag()) < 1e-5);
    REQUIRE(fabs(output[3].real()) < 1e-5);
    REQUIRE(fabs(output[3].imag()) < 1e-5);
    REQUIRE(fabs(output[4].real()) < 1e-5);
    REQUIRE(fabs(output[4].imag()) < 1e-5);
    REQUIRE(fabs(output[5].real()) < 1e-5);
    REQUIRE(fabs(output[5].imag()) < 1e-5);
    REQUIRE(fabs(output[6].real()) < 1e-5);
    REQUIRE(fabs(output[6].imag()) < 1e-5);
    REQUIRE(fabs(output[7].real() - 5.65685425) < 1e-5);
    REQUIRE(fabs(output[7].imag() + 5.65685425) < 1e-5);
    fft.Init(8, false);
    fft.Transform(output, input);
    REQUIRE(fabs(input[0].real() - 0.707107) < 1e-5);
    REQUIRE(fabs(input[0].imag() + 0.707107) < 1e-5);
    REQUIRE(fabs(input[1].real()) < 1e-5);
    REQUIRE(fabs(input[1].imag() + 1) < 1e-5);
    REQUIRE(fabs(input[2].real() + 0.707107) < 1e-5);
    REQUIRE(fabs(input[2].imag() + 0.707107) < 1e-5);
    REQUIRE(fabs(input[3].real() + 1) < 1e-5);
    REQUIRE(fabs(input[3].imag()) < 1e-5);
    REQUIRE(fabs(input[4].real() + 0.707107) < 1e-5);
    REQUIRE(fabs(input[4].imag() - 0.707107) < 1e-5);
    REQUIRE(fabs(input[5].real()) < 1e-5);
    REQUIRE(fabs(input[5].imag() - 1) < 1e-5);
    REQUIRE(fabs(input[6].real() - 0.707107) < 1e-5);
    REQUIRE(fabs(input[6].imag() - 0.707107) < 1e-5);
    REQUIRE(fabs(input[7].real() - 1) < 1e-5);
    REQUIRE(fabs(input[7].imag()) < 1e-5);
}

TEST_CASE("Test radix4 fft implementation", "[fft]") {
    ::hitdsp::fft::FftRadix4 fft;
    fft.Init(4, true);
    ::std::complex<float> input[4];
    ::std::complex<float> output[4];
    input[0] = ::std::complex<float>(1, 0);
    input[1] = ::std::complex<float>(0, 0);
    input[2] = ::std::complex<float>(0, 0);
    input[3] = ::std::complex<float>(0, 0);
    fft.Transform(input, output);
    REQUIRE(fabs(output[0].real() - 1) < 1e-5);
    REQUIRE(fabs(output[0].imag()) < 1e-5);
    REQUIRE(fabs(output[1].real() - 1) < 1e-5);
    REQUIRE(fabs(output[1].imag()) < 1e-5);
    REQUIRE(fabs(output[2].real() - 1) < 1e-5);
    REQUIRE(fabs(output[2].imag()) < 1e-5);
    REQUIRE(fabs(output[3].real() - 1) < 1e-5);
    REQUIRE(fabs(output[3].imag()) < 1e-5);
    fft.Init(4, false);
    fft.Transform(output, input);
    REQUIRE(fabs(input[0].real() - 1) < 1e-5);
    REQUIRE(fabs(input[0].imag()) < 1e-5);
    REQUIRE(fabs(input[1].real()) < 1e-5);
    REQUIRE(fabs(input[1].imag()) < 1e-5);
    REQUIRE(fabs(input[2].real()) < 1e-5);
    REQUIRE(fabs(input[2].imag()) < 1e-5);
    REQUIRE(fabs(input[3].real()) < 1e-5);
    REQUIRE(fabs(input[3].imag()) < 1e-5);
}

TEST_CASE("Test 16 point fft implementation", "[fft]") {
    ::hitdsp::fft::FftBaseImpl fft_base;
    fft_base.Init(16, true);
    ::hitdsp::fft::FftRadix2 fft_radix2;
    fft_radix2.Init(16, true);
    ::hitdsp::fft::FftRadix4 fft_radix4;
    fft_radix4.Init(16, true);
    ::std::complex<float> input[16];
    ::std::complex<float> output[16];
    for (int idx = 0; idx < 16; ++idx) {
        input[idx] = 0;
    }
    input[0] = 1;
    input[2] = 1;
    input[7] = 1;
    fft_base.Transform(input, output);
    REQUIRE(fabs(output[0].real() - 3.000000000000000) < 1e-5);
    REQUIRE(fabs(output[0].imag() - 0.000000000000000) < 1e-5);
    REQUIRE(fabs(output[1].real() - 0.783227248675261) < 1e-5);
    REQUIRE(fabs(output[1].imag() + 1.089790213551637) < 1e-5);
    REQUIRE(fabs(output[2].real() - 1.707106781186547) < 1e-5);
    REQUIRE(fabs(output[2].imag() + 0.292893218813452) < 1e-5);
    REQUIRE(fabs(output[3].real() + 0.089790213551637) < 1e-5);
    REQUIRE(fabs(output[3].imag() + 1.630986313697834) < 1e-5);
    REQUIRE(fabs(output[4].real() - 0.000000000000000) < 1e-5);
    REQUIRE(fabs(output[4].imag() - 1.000000000000000) < 1e-5);
    REQUIRE(fabs(output[5].real() - 0.675576651178542) < 1e-5);
    REQUIRE(fabs(output[5].imag() + 0.216772751324739) < 1e-5);
    REQUIRE(fabs(output[6].real() - 0.292893218813452) < 1e-5);
    REQUIRE(fabs(output[6].imag() - 1.707106781186547) < 1e-5);
    REQUIRE(fabs(output[7].real() - 2.630986313697834) < 1e-5);
    REQUIRE(fabs(output[7].imag() - 0.324423348821458) < 1e-5);
    REQUIRE(fabs(output[8].real() - 1.000000000000000) < 1e-5);
    REQUIRE(fabs(output[8].imag() - 0.000000000000000) < 1e-5);
    REQUIRE(fabs(output[9].real() - 2.630986313697834) < 1e-5);
    REQUIRE(fabs(output[9].imag() + 0.324423348821458) < 1e-5);
    REQUIRE(fabs(output[10].real() - 0.292893218813452) < 1e-5);
    REQUIRE(fabs(output[10].imag() + 1.707106781186547) < 1e-5);
    REQUIRE(fabs(output[11].real() - 0.675576651178542) < 1e-5);
    REQUIRE(fabs(output[11].imag() - 0.216772751324739) < 1e-5);
    REQUIRE(fabs(output[12].real() - 0.000000000000000) < 1e-5);
    REQUIRE(fabs(output[12].imag() + 1.000000000000000) < 1e-5);
    REQUIRE(fabs(output[13].real() + 0.089790213551637) < 1e-5);
    REQUIRE(fabs(output[13].imag() - 1.630986313697834) < 1e-5);
    REQUIRE(fabs(output[14].real() - 1.707106781186547) < 1e-5);
    REQUIRE(fabs(output[14].imag() - 0.292893218813452) < 1e-5);
    REQUIRE(fabs(output[15].real() - 0.783227248675261) < 1e-5);
    REQUIRE(fabs(output[15].imag() - 1.089790213551637) < 1e-5);
    fft_radix2.Transform(input, output);
    REQUIRE(fabs(output[0].real() - 3.000000000000000) < 1e-5);
    REQUIRE(fabs(output[0].imag() - 0.000000000000000) < 1e-5);
    REQUIRE(fabs(output[1].real() - 0.783227248675261) < 1e-5);
    REQUIRE(fabs(output[1].imag() + 1.089790213551637) < 1e-5);
    REQUIRE(fabs(output[2].real() - 1.707106781186547) < 1e-5);
    REQUIRE(fabs(output[2].imag() + 0.292893218813452) < 1e-5);
    REQUIRE(fabs(output[3].real() + 0.089790213551637) < 1e-5);
    REQUIRE(fabs(output[3].imag() + 1.630986313697834) < 1e-5);
    REQUIRE(fabs(output[4].real() - 0.000000000000000) < 1e-5);
    REQUIRE(fabs(output[4].imag() - 1.000000000000000) < 1e-5);
    REQUIRE(fabs(output[5].real() - 0.675576651178542) < 1e-5);
    REQUIRE(fabs(output[5].imag() + 0.216772751324739) < 1e-5);
    REQUIRE(fabs(output[6].real() - 0.292893218813452) < 1e-5);
    REQUIRE(fabs(output[6].imag() - 1.707106781186547) < 1e-5);
    REQUIRE(fabs(output[7].real() - 2.630986313697834) < 1e-5);
    REQUIRE(fabs(output[7].imag() - 0.324423348821458) < 1e-5);
    REQUIRE(fabs(output[8].real() - 1.000000000000000) < 1e-5);
    REQUIRE(fabs(output[8].imag() - 0.000000000000000) < 1e-5);
    REQUIRE(fabs(output[9].real() - 2.630986313697834) < 1e-5);
    REQUIRE(fabs(output[9].imag() + 0.324423348821458) < 1e-5);
    REQUIRE(fabs(output[10].real() - 0.292893218813452) < 1e-5);
    REQUIRE(fabs(output[10].imag() + 1.707106781186547) < 1e-5);
    REQUIRE(fabs(output[11].real() - 0.675576651178542) < 1e-5);
    REQUIRE(fabs(output[11].imag() - 0.216772751324739) < 1e-5);
    REQUIRE(fabs(output[12].real() - 0.000000000000000) < 1e-5);
    REQUIRE(fabs(output[12].imag() + 1.000000000000000) < 1e-5);
    REQUIRE(fabs(output[13].real() + 0.089790213551637) < 1e-5);
    REQUIRE(fabs(output[13].imag() - 1.630986313697834) < 1e-5);
    REQUIRE(fabs(output[14].real() - 1.707106781186547) < 1e-5);
    REQUIRE(fabs(output[14].imag() - 0.292893218813452) < 1e-5);
    REQUIRE(fabs(output[15].real() - 0.783227248675261) < 1e-5);
    REQUIRE(fabs(output[15].imag() - 1.089790213551637) < 1e-5);
    fft_radix4.Transform(input, output);
    REQUIRE(fabs(output[0].real() - 3.000000000000000) < 1e-5);
    REQUIRE(fabs(output[0].imag() - 0.000000000000000) < 1e-5);
    REQUIRE(fabs(output[1].real() - 0.783227248675261) < 1e-5);
    REQUIRE(fabs(output[1].imag() + 1.089790213551637) < 1e-5);
    REQUIRE(fabs(output[2].real() - 1.707106781186547) < 1e-5);
    REQUIRE(fabs(output[2].imag() + 0.292893218813452) < 1e-5);
    REQUIRE(fabs(output[3].real() + 0.089790213551637) < 1e-5);
    REQUIRE(fabs(output[3].imag() + 1.630986313697834) < 1e-5);
    REQUIRE(fabs(output[4].real() - 0.000000000000000) < 1e-5);
    REQUIRE(fabs(output[4].imag() - 1.000000000000000) < 1e-5);
    REQUIRE(fabs(output[5].real() - 0.675576651178542) < 1e-5);
    REQUIRE(fabs(output[5].imag() + 0.216772751324739) < 1e-5);
    REQUIRE(fabs(output[6].real() - 0.292893218813452) < 1e-5);
    REQUIRE(fabs(output[6].imag() - 1.707106781186547) < 1e-5);
    REQUIRE(fabs(output[7].real() - 2.630986313697834) < 1e-5);
    REQUIRE(fabs(output[7].imag() - 0.324423348821458) < 1e-5);
    REQUIRE(fabs(output[8].real() - 1.000000000000000) < 1e-5);
    REQUIRE(fabs(output[8].imag() - 0.000000000000000) < 1e-5);
    REQUIRE(fabs(output[9].real() - 2.630986313697834) < 1e-5);
    REQUIRE(fabs(output[9].imag() + 0.324423348821458) < 1e-5);
    REQUIRE(fabs(output[10].real() - 0.292893218813452) < 1e-5);
    REQUIRE(fabs(output[10].imag() + 1.707106781186547) < 1e-5);
    REQUIRE(fabs(output[11].real() - 0.675576651178542) < 1e-5);
    REQUIRE(fabs(output[11].imag() - 0.216772751324739) < 1e-5);
    REQUIRE(fabs(output[12].real() - 0.000000000000000) < 1e-5);
    REQUIRE(fabs(output[12].imag() + 1.000000000000000) < 1e-5);
    REQUIRE(fabs(output[13].real() + 0.089790213551637) < 1e-5);
    REQUIRE(fabs(output[13].imag() - 1.630986313697834) < 1e-5);
    REQUIRE(fabs(output[14].real() - 1.707106781186547) < 1e-5);
    REQUIRE(fabs(output[14].imag() - 0.292893218813452) < 1e-5);
    REQUIRE(fabs(output[15].real() - 0.783227248675261) < 1e-5);
    REQUIRE(fabs(output[15].imag() - 1.089790213551637) < 1e-5);
}